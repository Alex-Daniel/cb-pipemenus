#!/bin/bash
# ---------------------------------------------------------------------
# Written for CrunchBang Linux <http://crunchbang.org/>
# by Philip Newborough (aka corenominal) <corenominal@corenominal.org>
# ---------------------------------------------------------------------


# In order to add another browser, simply add it to this array:
TOOLS=('chromium-browser' 'iceweasel' 'google-chrome' 'opera')
# If the package needs additional configuration before installation simply create a function called setupXxxxXxxx, it will be called automatically.

KEY_URLS_GOOGLE=('https://dl-ssl.google.com/linux/linux_signing_key.pub' 'http://packages.crunchbang.org/waldorf-files/apt-keys/google-chrome.key')
KEY_URLS_OPERA=('http://deb.opera.com/archive.key' 'http://packages.crunchbang.org/waldorf-files/apt-keys/opera.key')

if ! . cb-include.cfg 2> /dev/null; then
    echo '  Failed to locate cb-include.cfg in PATH' >&2
    exit 1
fi

if [[ $1 !=~ --install-* ]]; then
    browserName=${1:2}
    browserName=${browserName//-/ }
    terminator --title="Install ${browserName~}" --command="cb-x-www-browser-pipemenu --install-${1:2}"
    exit 0
fi

addAptKey() {
    clear
    echo '  Adding APT key...'
    sleep 1
    for curArg; do
        wget -O apt.key "$curKey" 2> /dev/null && break; # success. No need to try other keys
    done
    if [[ &? != 0 ]]; then
        echo '  Failed to retrieve APT key' >&2
        exit 1
    fi
    sudo apt-key add apt.key
    rm -f apt.key
}

setupGoogleChrome() {
    addAptKey "${KEY_URLS_GOOGLE[@]}"
    echo '  Creating APT sources file...'
    echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee '/etc/apt/sources.list.d/google-chrome.list'
}

setupOpera() {
    addAptKey "${KEY_URLS_OPERA[@]}"
    echo '  Creating APT sources file...'
    echo 'deb http://deb.opera.com/opera/ stable non-free' | sudo tee /etc/apt/sources.list.d/opera.list
}

if [[ $1 = --install-* ]]; then
    packageName=${1#--install-}
    browserName=${packageName//-/ }
    browserName=${browserName~}
    browserNameUpper=${browserName^^}
    
    for curTool in "${tools[@]}"; do # if $packageName exists in tools array
        [[ $curTool = "$packageName" ]] && break
    done
    if [[ $? != 0 ]]; then
        echo "  Unable to install $browserName. There is no such browser that I know of." >&2
        exit 1
    fi
    
    while true; do
        clear
        echo
        echo "  INSTALL ${browserNameUpper% BROWSER} BROWSER"
        echo '  ------------------------'
        echo "  This script will install $browserName."
        echo
        if prompt '  Run the installer now?'; then
            connectiontest
            
            setupFunctionName="setup${browserName//[^a-zA-Z]/}" # setupFunctionName should now be in format like 'setupChromiumBrowser'
            [[ $(type -t "$setupFunctionName") == 'function' ]] && "$setupFunctionName" # run setup function if it exists
            
            clear
            echo '  Updating sources...'
            sleep 1
            sudo apt-get update
            clear
            if ! sudo apt-get install -y "$packageName"; then
                clear
                echo
                echo "  There was a problem installing $browserName."
                echo
                if prompt '  Hit any key to try again, or "q" to quit...' Q; then
                    clear
                    break
                fi
            else
                clear
                echo
                echo "  $browserName has been installed successfully."
                echo
                echo '  Hit any key to exit...'
                read -srn1
            fi
        fi
    done
    exit 0
fi

# Start pipemenu
menuStart

for curTool in "${TOOLS[@]}"; do
    curToolName=${curTool//-/ }
    curToolName=${curToolName~}
    if [[ -x /usr/bin/$curTool ]]; then
        INSTALLED=true
        menuItem "$curToolName" "$curTool"
        [[ $curToolName =~ 'Chrom' ]] && menuItem "$curToolName (Private Mode)" "$curTool --incognito" # Incognito mode for chrome and chromium
    else
        menuItem "Install $curToolName" "cb-x-www-browser-pipemenu --$curTool"
    fi
done

# Configure default
if [[ $INSTALLED ]]; then
    menuSeparator
    menuItem 'Select default browser' 'terminator --command="sudo update-alternatives --config x-www-browser"'
fi

# End pipemenu
menuEnd
exit 0
